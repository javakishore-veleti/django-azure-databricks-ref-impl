"""
Django settings for user_management_service project.

Generated by 'django-admin startproject' using Django 4.1.13.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Read the environment variables to decide which service to use
USE_AZURE = os.getenv('USE_AZURE', 'False') == 'True'
USE_KAFKA = os.getenv('USE_KAFKA', 'False') == 'True'

# Get Event Hub names from environment variable, applicable for both Azure and Kafka
EVENT_HUB_NAMES = os.getenv('EVENT_HUB_NAMES', 'user_updates,event_hub_name_1,event_hub_name_2').split(',')

# Azure Event Hub connection details
AZURE_EVENT_HUB_CONNECTION_STRING = os.getenv('AZURE_EVENT_HUB_CONNECTION_STRING', 'your_azure_connection_string')

# Kafka details for local development
KAFKA_BOOTSTRAP_SERVERS = os.getenv('KAFKA_BOOTSTRAP_SERVERS', 'localhost:9092')

# Event Publisher Configuration (conditional based on environment variables)
if USE_AZURE:
    # Azure Event Hub configuration
    EVENT_PUBLISHER = 'azure'
    AZURE_EVENT_HUB_CONNECTION_STRING = os.getenv('AZURE_EVENT_HUB_CONNECTION_STRING', 'your_default_connection_string')
    AZURE_EVENT_HUB_NAME = os.getenv('AZURE_EVENT_HUB_NAME', 'your_event_hub_name')
elif USE_KAFKA:
    # Kafka configuration
    EVENT_PUBLISHER = 'kafka'
    KAFKA_BOOTSTRAP_SERVERS = os.getenv('KAFKA_BOOTSTRAP_SERVERS', 'localhost:9092')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-^&!)0c((gunz(f02$g_m23c$#%fos0mv_#_*q2@_z%abzsoh1n'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core_users',
    'api_users',
    'rest_framework',
    'drf_yasg',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'user_management_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'user_management_service.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

USE_POSTGRES = os.getenv('USE_POSTGRES', 'False') == 'True'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql' if USE_POSTGRES else 'django.db.backends.sqlite3',
        'NAME': os.getenv('POSTGRES_DB', BASE_DIR / 'db.sqlite3') if not USE_POSTGRES else os.getenv('POSTGRES_DB', 'postgres'),
        'USER': os.getenv('POSTGRES_USER', 'postgres') if USE_POSTGRES else '',
        'PASSWORD': os.getenv('POSTGRES_PASSWORD', 'postgres') if USE_POSTGRES else '',
        'HOST': os.getenv('POSTGRES_HOST', 'localhost') if USE_POSTGRES else '',
        'PORT': os.getenv('POSTGRES_PORT', '5432') if USE_POSTGRES else '',
        'OPTIONS': {
            'options': '-c search_path={}'.format(os.getenv('POSTGRES_SCHEMA', 'user_mgmt_db'))  # Set the schema here
        } if USE_POSTGRES else {},
    }
}



# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
